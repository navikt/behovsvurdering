name: Test, build, push and deploy
on: push
env:
  IMAGE_TAG: ${{ github.sha }}
  IMAGE: docker.pkg.github.com/${{ github.repository }}/behovsvurdering
  PRINT_PAYLOAD: true
  CI: true
jobs:
  test:
    name: Run tests
    runs-on: ubuntu-latest
    if: github.ref != 'refs/heads/dev' && github.ref != 'refs/heads/gcp-migrering'
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '12.x'
      - name: Install dependencies
        run: npm ci
      - name: Run tests
        run: npm run test

#  test-build-and-push:
#    name: Test, build and push
#    runs-on: ubuntu-latest
#    if: github.ref == 'refs/heads/dev' || github.ref == 'refs/heads/gcp-migrering'
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Setup node
#        uses: actions/setup-node@v1
#        with:
#          node-version: '12.x'
#      - name: Install dependencies
#        run: npm ci
#      - name: Build application
#        run: npm run build
#      - name: Build and push Docker image
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        run: |
#          docker login docker.pkg.github.com -u ${GITHUB_REPOSITORY} -p ${GITHUB_TOKEN}
#          docker build -t ${IMAGE}:${IMAGE_TAG} .
#          docker push ${IMAGE}:${IMAGE_TAG}

#  deploy-gcp:
#    name: Deploy application to GCP
#    if: github.ref == 'refs/heads/gcp-migrering'
#    needs: test-build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Deploy application
#        uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-gcp
#          RESOURCE: nais-dev-gcp.yaml
#          VAR: version=${{ env.IMAGE_TAG }}

  upload-dev-gcs:
    name: Upload files to dev GCS
    if: github.ref == 'refs/heads/gcp-migrering'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v1
      - name: Setup node
        uses: actions/setup-node@v1
        with:
          node-version: '14.x'
      - name: Install dependencies
        run: npm ci
      - name: Build application
        run: npm run build
      - name: Upload files
        uses: GoogleCloudPlatform/github-actions/upload-cloud-storage@master
        with:
          credentials: ${{ secrets.GCS_SA_KEY_DEV }}
          path: build/*
          destination: pto-dev-behovsvurdering2

#  deploy-q0:
#    name: Deploy application to Q0
#    if: github.ref == 'refs/heads/dev'
#    needs: test-build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Deploy application
#        uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-sbs
#          RESOURCE: nais-q0.yaml
#          VAR: version=${{ env.IMAGE_TAG }}
#  deploy-q1:
#    name: Deploy application to Q1
#    if: github.ref == 'refs/heads/dev'
#    needs: test-build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Deploy application
#        uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: dev-sbs
#          RESOURCE: nais-q1.yaml
#          VAR: version=${{ env.IMAGE_TAG }}
#  deploy-prod:
#    name: Deploy application to prod
#    if: github.ref == 'refs/heads/master'
#    needs: test-build-and-push
#    runs-on: ubuntu-latest
#    steps:
#      - name: Checkout
#        uses: actions/checkout@v1
#      - name: Deploy application
#        uses: nais/deploy/actions/deploy@v1
#        env:
#          APIKEY: ${{ secrets.NAIS_DEPLOY_APIKEY }}
#          CLUSTER: prod-sbs
#          RESOURCE: nais.yaml
#          VAR: version=${{ env.IMAGE_TAG }}
#  release-dev:
#    name: Create dev release
#    needs: [deploy-q0, deploy-q1]
#    runs-on: ubuntu-latest
#    steps:
#      - name: Create release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: release/dev@${{ env.IMAGE_TAG }}
#          release_name: Release to dev
#          prerelease: true
#  release-prod:
#    name: Create prod release
#    needs: deploy-prod
#    runs-on: ubuntu-latest
#    steps:
#      - name: Create release
#        uses: actions/create-release@v1
#        env:
#          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
#        with:
#          tag_name: release/prod@${{ env.IMAGE_TAG }}
#          release_name: Release to prod
#          prerelease: false
